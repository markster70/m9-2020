
// to convert a number value to a rem font-size, with a px fallback
// dependencies - $base-font-size ( included as variable - usually number 16 to coincide with 16px for standard browser font size )
// param $size - number

// usage :

// @include font-size(16);

// returns css :
// font-size: 16px;
// font-size: 1rem

@mixin font-size($size) {

  font-size: 0px + $size;
  font-size: 0rem + $size / $base-font-size;
}


// to add media queries within scss architecture, based on min, or max width
// dependencies - $base-font-size ( included as variable - usually number 16 to coincide with 16px for standard browser font size )
// params $bp ( number without px ), $min-max( default min-width) - can also receive max-width, or min-height etc )

// usage :

//.my-component-class {
//
//  @include breakpoint($bp-l) {
//    display: none;
//  }
//}

// returns css

//@media (min-width: 60em) {
//  .my-component-class {
//    display: none;
//  }
//}


@mixin breakpoint($bp, $min-max: min-width) {
  $em: $bp/$base-font-size;
  @media(#{$min-max}: #{$em}em) { @content; }
}


// to add style rules baed on multiple breakpoint considerations or min height and min width
// params $minHeight - number to be used as pixel value for min-height, $minWidth - to be used as number for min-width
// minWidth default set as $bp-l which is from variables partial and part of my basic codebase

// usage

//.mn-section-home-hello {
//
//  @include bpLargeMinHeight($bp-height-min, $bp-xl) {
//    @include font-size(220);
//  }
//
//}

//returns css :

//@media screen and (min-height: 900px) and (min-width: 1280px) {
//  .mn-section-home-hello {
//    font-size: 220px;
//    font-size: 13.75rem;
//  }
//}

@mixin bpLargeMinHeight ($minHeight: 1000, $minWidth: $bp-l) {
  @media screen and (min-height:  #{$minHeight}px) and (min-width: #{$minWidth}px) {
    @content;
  }
}

// to add style rules for small screen landscape orientated devices - useful for phone media queries
// no params

// usage

//.mn-home-grad-bg.is-bg-a {
//
//  @include ssLandscape () {
//    opacity: 0.2;
//    background-size: 90%;
//  }
// }

// returns css :

// @media (max-device-width: 799px) and (orientation: landscape) {
//    .mn-home-grad-bg.is-bg-a {
//      opacity: 0.2;
//      background-size: 90%;
//     }
//  }

@mixin ssLandscape() {
  @media (max-device-width: 799px) and (orientation: landscape) {
    @content;
  }
}

// to normalize css transition implementation across browsers with various pre-fixes usually required

// params
// $property - css property to apply transition to ( default all )
// $speed - speed required for the particular transition ( default 300ms )
// ease - easing equation to to be appled ( default ease 0s )

// usage

//a {
// opacity 0.5
//
// @include std-transitions($property: opacity, $speed: 400ms, $ease: cubic-bezier(0.215, 0.610, 0.355, 1.000));
//
// &:hover {
//    opacity: 1;
// }
//}

// returns css :

//-webkit-transition: opacity 400ms cubic-bezier(0.215, 0.61, 0.355, 1);
//-moz-transition: opacity 400ms cubic-bezier(0.215, 0.61, 0.355, 1);
//-o-transition: opacity 400ms cubic-bezier(0.215, 0.61, 0.355, 1);
//transition: opacity 400ms cubic-bezier(0.215, 0.61, 0.355, 1);

@mixin std-transitions($property:all, $speed: 300ms, $ease: ease 0s) {

  -webkit-transition: $property $speed $ease;
  -moz-transition: $property $speed $ease;
  -o-transition: $property $speed $ease;
  transition: $property $speed $ease;
}

// to reset any standard button styles that are applied by ua stylesheet
// no params

// usage
// .mn-site-footer-btt {
//
//  @include button-reset();
//
// }

// returns css :
// .mn-site-footer-btt {
//    background: transparent;
//    border: 0;
//    box-shadow: none;
// }

@mixin button-reset () {

  background: transparent;
  border: 0;
  box-shadow: none;
}

// to reset list elements styles generated by ua stylesheets
// no params

// usage
// .mn-page-indicators ul {
// @include list-reset();
// }

// returns css :

// .mn-page-indicators ul {
//    list-style: none;
//    margin: 0;
//    padding: 0;
// }

@mixin list-reset() {

  list-style: none;
  margin: 0;
  padding: 0;
}


@mixin hoverMouse () {
  @media(hover: hover) and (pointer: fine) {
    @content;
  }
}
